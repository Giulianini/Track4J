buildscript {
	repositories {
	    jcenter()
	    mavenCentral()
	}
	dependencies {
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'
}

group = project_group
archivesBaseName = project_artifact
version = version

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fatJar(type: Jar) {
	classifier = 'all'
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

configurations {
    localCompile.transitive = false
    compile.extendsFrom(localCompile)
}

	//if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
	//if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''
	user = project.hasProperty('bintrayUsername') ? project.property('bintrayUsername') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
//BINTRAY
bintray {
    user = project.bintrayUsername
    key = project.bintrayApiKey
    
    publications = ['maven']
    pkg {
        repo = 'maven'
        name = project.project_name
        desc = project.project_description
        licenses = [project.project_license_tag]
        labels = ['track4j', 'sensor', 'kinect']
        publicDownloadNumbers = true
        websiteUrl = "https://github.com/$project.your_github_name/$project.project_name"
        issueTrackerUrl = "https://github.com/$project.your_github_name/$project.project_name/issues"
        vcsUrl = "https://github.com/$your_github_name/${project.project_name}.git"
        githubRepo = "$your_github_name/$project.project_name"
    	githubReleaseNotesFile = 'docs/releasenotes.md'
        version {
            name = version //project.project_version
            vcsTag = version //project.project_version
            desc = 'Release'
            released = new Date()
            gpg {
                sign = true
            }
        }
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId project_group
            artifactId project_artifact
            version version //project_version
            
            
            artifact sourcesJar {
	        	classifier 'sources'
	      	}
	
		  	artifact javadocJar {
	        	classifier 'javadoc'
	      	}
	      	
	      	artifact fatJar {
	        	classifier 'all'
	      	}
            
            
            pom {
		        packaging 'jar'
		        withXml {
		          	asNode().children().last() + {
						def builder = delegate
						
						// maven central publishing mandatories
						builder.name project.project_name
						builder.description project.project_description
						builder.url "https://github.com/$project.your_github_name/$project.project_name"
						
						builder.licenses {
						    builder.license {
						      builder.name 'The Apache Software License, Version 2.0'
						      builder.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						      builder.distribution 'repo'
						    }
						}
						builder.scm {
						    builder.url 'scm:svn:http://github.com/Giulianini/Track4J'
						    builder.connection 'scm:svn:http://github.com/Giulianini/Track4J.git'
						    builder.developerConnection 'scm:svn:ssh://github.com/Giulianini/Track4J.git'
						}
						builder.developers {
						    builder.developer {
						      builder.name 'Luca Giulianini'
						      builder.email 'luca.giulianini@studio.unibo.it'
						    }
						
						}
						
						// maven central publishing optionals
						builder.issueManagement {
						  builder.system 'github'
						  builder.url 'https://github.com/p6spy/p6spy/issues'
						}
						builder.ciManagement {
						  builder.system 'Travis CI'
						  builder.url 'https://travis-ci.org/p6spy/p6spy'
						}
		        	}		    
        		}
    		}
    	}
    }
}

repositories {
    mavenCentral()
   	jcenter()
   	flatDir {
   	    dir 'libs'
   	}
}

dependencies {
	//compile all jar in libs
	localCompile fileTree(dir: 'libs', include: '*.jar')
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.google.guava:guava:23.0'
    testCompile 'junit:junit:4.12'
    compile 'com.github.haifengl:smile-core:1.5.1'
    compile 'com.jfoenix:jfoenix:8.0.3' // Java 8
    compile 'org.kordamp.ikonli:ikonli-material-pack:2.1.1'
    compile 'org.kordamp.ikonli:ikonli-javafx:2.1.1'
    compile 'eu.hansolo.enzo:Enzo:0.3.6'
    compile 'com.google.code.gson:gson:2.8.4' 
}

sourceSets {
    main {
        java {
            srcDirs= ["src/main/java"]
        }
        resources {
            srcDirs= ["src/main/resources"]
        }
        
    }
}

jar {
    doFirst {
        manifest {
            if (!configurations.compile.isEmpty()) {
                attributes(
                        'Class-Path': configurations.localCompile.collect{it.getName()}.join(' '))
            }
        }
    }
    from {
        configurations.localCompile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

signing {
	required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

artifacts {
    archives javadocJar, sourcesJar
}


